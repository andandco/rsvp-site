module Data.Gen exposing (..)

-- this code is generated by elm-export. Do not edit

import Json.Decode exposing (..)

import Json.Decode.Extra exposing (date)

import Json.Decode.Pipeline exposing (..)

import Json.Encode

import Date exposing (Date)

import Http

import String

decodeDate = date

type alias Event =
    { eventName : String
    , eventDescription : Maybe (String)
    , eventAsset_id : String
    , eventOwner_id : Int
    , eventAll_day : Bool
    , eventStart_datetime : Date
    , eventEnd_datetime : Maybe (Date)
    , eventId : Int
    }

decodeEvent : Decoder Event
decodeEvent =
    decode Event
        |> required "name" string
        |> required "description" (maybe string)
        |> required "asset_id" string
        |> required "owner_id" int
        |> required "all_day" bool
        |> required "start_datetime" decodeDate
        |> required "end_datetime" (maybe decodeDate)
        |> required "id" int

encodeEvent : Event -> Json.Encode.Value
encodeEvent x =
    Json.Encode.object
        [ ( "name", Json.Encode.string x.eventName )
        , ( "description", (Maybe.withDefault Json.Encode.null << Maybe.map Json.Encode.string) x.eventDescription )
        , ( "asset_id", Json.Encode.string x.eventAsset_id )
        , ( "owner_id", Json.Encode.int x.eventOwner_id )
        , ( "all_day", Json.Encode.bool x.eventAll_day )
        , ( "start_datetime", (Json.Encode.string << toString) x.eventStart_datetime )
        , ( "end_datetime", (Maybe.withDefault Json.Encode.null << Maybe.map (Json.Encode.string << toString)) x.eventEnd_datetime )
        , ( "id", Json.Encode.int x.eventId )
        ]

type alias User =
    { userIdent : String
    , userName : Maybe (String)
    , userId : Int
    }

decodeUser : Decoder User
decodeUser =
    decode User
        |> required "ident" string
        |> required "name" (maybe string)
        |> required "id" int

encodeUser : User -> Json.Encode.Value
encodeUser x =
    Json.Encode.object
        [ ( "ident", Json.Encode.string x.userIdent )
        , ( "name", (Maybe.withDefault Json.Encode.null << Maybe.map Json.Encode.string) x.userName )
        , ( "id", Json.Encode.int x.userId )
        ]