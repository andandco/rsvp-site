module Main where

import ClassyPrelude.Yesod hiding (Proxy)
import Data.Proxy
import Elm
import Elm.Export.Persist
import Elm.Export.Persist.BackendKey ()
import Model

mkSpecBody :: ElmType a => a -> Options -> [Text]
mkSpecBody a opts =
  [ toElmTypeSource a
  , toElmDecoderSourceWith opts a
  , toElmEncoderSourceWith opts a
  ]

defImports :: [Text]
defImports =
  [ "-- this code is generated by elm-export. Do not edit"
  , "import Json.Decode exposing (..)"
  , "import Json.Decode.Extra exposing (date)"
  , "import Json.Decode.Pipeline exposing (..)"
  , "import Json.Encode"
  , "import Date exposing (Date)"
  , "import Http"
  , "import String"
  , "decodeDate = date"
  ]

spec :: Spec
spec =
  Spec ["Data", "Gen"] $
       defImports
       ++ mkSpecBody (Proxy :: Proxy (Ent "eventId" Event)) (Options { fieldLabelModifier = toLower . drop 5 })
       ++ mkSpecBody (Proxy :: Proxy (Ent "userId" User))  (Options { fieldLabelModifier = toLower . drop 4 })

main :: IO ()
main = specsToDir [spec] "frontend/src"
